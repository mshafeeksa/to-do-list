(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>A});var o=n(537),r=n.n(o),a=n(645),i=n.n(a),d=n(667),c=n.n(d),s=new URL(n(302),n.b),l=i()(r());l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Salsa&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap);"]);var u=c()(s);l.push([e.id,`:root{\n    --theme-shade-dark-1: #092635;\n    --theme-shade-dark-2: #1B4242;\n    --theme-shade-dark-3: #5C8374;\n    --theme-shade-light: #9EC8B9;\n    --text-color-1: #000000;\n    --text-color-2: #ffffff;\n    --font-family: 'Ubuntu', Arial, Helvetica, sans-serif;\n    --font-logo: 'Salsa', cursive;\n}\n\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody, html{\n    width: 100%;\n    height: 100%;\n    font-family: var(--font-family);\n}\n\nbody{\n    background-image: url(${u});\n    background-size: cover;\n    background-repeat: no-repeat;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.main-container{\n    background-color: var(--theme-shade-dark-1);\n    width: 80%;\n    height: 80%;\n    max-height: 80%;\n    padding-top: 1%;\n    padding-left: 3%;    \n    display: grid;\n    grid-template: 1fr 8fr/ 1fr 4fr;\n}\n\n\n.logo-container{\n    font-family: var(--font-logo);\n    color: var(--text-color-2);\n    font-size: 2.4rem;\n    display: flex;\n    align-items:center;\n    grid-area: 1/1/1/-1;\n    padding: 1% 0;\n    cursor:default;\n}\n\n.trade-mark{\n    font-size: 1rem;\n    align-self: self-start  ;    \n}\n\n.side-heading{\n    font-size: 1.4rem;\n    font-weight: 700;\n    color: var(--text-color-2);\n    border-bottom: 2px solid var(--text-color-2);\n    cursor:default;\n    margin-right: 10%;\n}\n\n.side-bar{\n    padding: 5% 0 5% 5%;\n    display: flex;\n    flex-direction: column;\n}\n\n#projects{\n    flex: 1;\n}\n\n.side-options{\n    margin-top: 5%;\n    margin-bottom: 5%;\n    font-size: 1.2rem;\n    color: var(--text-color-2);\n    cursor: pointer;\n    padding: 1% 0 1% 5%;\n    display: flex;\n    justify-content:space-between;\n}\n\n.side-options:hover{\n    font-weight: 700;  \n}\n\n.selected{\n    background-color:var(--theme-shade-light);\n    border-radius: 16px 0 0 16px;\n    font-weight: 700;\n    color: var(--text-color-1);\n}\n\n.display-area{\n    background-color: var(--theme-shade-light);\n    height: 100%;\n    grid-area: 2/2/-1/-1;\n    position: relative;\n}\n\n.display-area-no-task{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n    width: 100%;\n    height: 100%;\n}\n\n.button-area{\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n\n.no-task-display{\n    font-size: 2rem;\n    color: var(--theme-shade-dark-2);\n    flex: 1;\n    text-align: center;\n    height: 100%;\n    width: 100%;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n\n.add-icon{\n    width: 40%;\n    cursor: pointer;\n}\n\n.add-button-set{\n    width: 10%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.add-button-container{\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.add-button-set{\n    color: var(--text-color-1);\n    cursor: pointer;\n    padding: 1%;\n}\n\n\n\n.add-button-set:hover{\n    box-sizing:border-box;\n    background-color: var(--theme-shade-dark-1);\n    color: var(--text-color-2);\n    border-radius: 16px ;\n}\n\n.add-button-set:active{\n\n}\n\n.display-area-with-tasks{\n    grid-area: 2 1/-1 -4;\n    padding: 1%;\n    padding-bottom: 0;\n    overflow: auto;    \n    height: 100%;\n    width: 100%;\n    position: absolute;\n    padding-top: 0;\n}\n\n.page-heading{\n    font-size: 2.2rem;\n    font-weight: 700;\n    margin-left: 0;\n    margin-top: 0;\n    padding-top: 1%;\n    padding-bottom: 1%;\n    padding-left: 1%;\n    position: sticky;\n    top: 0;\n    background-color: var(--theme-shade-light);\n}\n\n.task-container-project{\n    display: grid;\n    grid-template-columns: 6fr 2fr 1.5fr 2fr 0.5fr 0.5fr;\n    align-items: center;\n    gap: 1.5%;\n    border-radius: 32px;\n    border: 1px solid var(--theme-shade-dark-2);\n    background-color: var(--theme-shade-dark-2);\n    color: #ffffff;\n    padding: 1% 3%;\n    margin: 1% auto;\n}\n\n.strike-through{\n    text-decoration: line-through;\n}\n\n\n.high{\n    background-color: red;\n    color: #ffffff;\n}\n\n.medium{\n    background-color: yellow;\n    color: #000000;\n}\n\n.low{\n    background-color: green;\n    color: #000000;\n}\n\n.delete{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n}\n\n.delete-icon{\n    color: var(--theme-shade-light);\n}\n\n.delete:hover{\n\n}\n\n.delete img{\n    width: 100%;\n    height: 100%;\n}\n\n.due-date, .days-left, .priority, .check-box, .delete{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 2rem;\n}\n\n.due-date, .days-left, .priority{\n    cursor: default;\n}\n\n.title{\n    font-weight: 900;\n    font-size: 1.1rem;\n}\n\n.description{\n    font-size: 0.8rem;\n    font-style: italic;\n}\n\n.task-add-container:hover{\n    color: red;\n}\n\n.task-add-container{\n    display: flex;\n    flex-direction: column;\n    width: 15%;\n    height: 10%;\n    justify-content: center;\n    align-items: center ;\n    margin: 2% auto;\n    cursor: pointer;\n}\n\n\n.add-icon-bottom{\n    width:auto;\n    max-height:100%;\n}\n\n.task-container-upcoming{\n    display: grid;\n    grid-template-columns: 2fr 6fr 2fr 1.5fr 2fr 0.5fr 0.5fr;\n    align-items: center;\n    gap: 1.5%;\n    border-radius: 32px;\n    border: 1px solid var(--theme-shade-dark-2);\n    background-color: var(--theme-shade-dark-2);\n    color: #ffffff;\n    padding: 1% 3%;\n    margin: 1% auto;\n}\n\n.task-container-upcoming .due-date, .task-container-upcoming .days-left{\n    font-size: 0.8rem;\n}\n\n.task-container-upcoming .project-name{\n    font-size: 1.4rem;\n    font-weight: 800;\n}\n\n.center {\n    padding: 1%;\n    font-size: 1.2rem;\n    line-height: 3rem;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    border: 3px solid black;\n    background-color: var(--theme-shade-dark-2);\n    color: var(--text-color-2);\n    box-shadow: 4px 5px 5px 0px rgba(0,0,0,0.75);\n    -webkit-box-shadow: 4px 5px 5px 0px rgba(0,0,0,0.75);\n    -moz-box-shadow: 4px 5px 5px 0px rgba(0,0,0,0.75);\n    border-radius: 8px;\n}\n\n.add-todo-modal{\n    height: 45%;\n    width: 30%;\n}\n\n.add-project-modal{\n    height: 25%;\n    width: 30%;\n}\n\n#todo-entry-modal h2{\n    text-align: center;\n}\n\ninput{\n    width: 100%;\n    font-size: 1.1rem;\n    border-radius: 5px;\n    padding: 1%;\n}\n\n.todo-duedate-section, .todo-priority-section{\n    display: flex;\n    gap: 5%;\n    width: 60%;\n}\n\n.todo-duedate-section label{\n    text-wrap: nowrap;\n}\n\n.todo-description-section{\n    min-height: 40%;\n}\n\nselect, option{\n    font-size: 1.1rem;\n}\n\n.form-section{\n    margin-top: 2%;\n}\n\nform button{\n    width: 20%;\n    height: 100%;\n    font-size: 1.2rem;\n    cursor: pointer;\n    padding: 1% 0;\n    border-radius: 8px;\n    font-size: 900  ;\n}\n\nform .form-buttons-section{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 5%;\n    margin-top: 5%;\n    min-height: 100%;\n}\n\n#delete-button{\n    background-image: linear-gradient(to right, #EB3349 0%, #F45C43  51%, #EB3349  100%);\n    color: #ffffff;\n    background-size: 200% auto;\n}\n\n\n#delete-button:hover {\n    background-position: right center; /* change the direction of the change here */\n    color: #fff;\n    text-decoration: none;\n}\n\n#add-button{\n    background-image: linear-gradient(to right, #ADD100 0%, #7B920A  51%, #ADD100  100%);\n    color: #000000;\n    background-size: 200% auto;     \n}\n\n#add-button:hover {\n    background-position: right center; /* change the direction of the change here */\n    color: #fff;\n    text-decoration: none;\n}\n \n.add-project-button{\n    padding: 2% 2%;\n    font-size: 1rem;\n    font-weight: 600;\n    border-radius:4px;\n    cursor: pointer;\n    background-color: var(--theme-shade-light);\n    margin-top: 4%;\n    margin-left: 5%;\n}\n\n.add-project-button:hover{\n    background-color: var(--theme-shade-dark-2);\n    color: var(--text-color-2);\n}\n\n.side-options img{\n    height: 1.4rem;\n    margin-right: 8%;\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;IACI,6BAA6B;IAC7B,6BAA6B;IAC7B,6BAA6B;IAC7B,4BAA4B;IAC5B,uBAAuB;IACvB,uBAAuB;IACvB,qDAAqD;IACrD,6BAA6B;AACjC;;AAEA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,+BAA+B;AACnC;;AAEA;IACI,yDAAiC;IACjC,sBAAsB;IACtB,4BAA4B;IAC5B,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,2CAA2C;IAC3C,UAAU;IACV,WAAW;IACX,eAAe;IACf,eAAe;IACf,gBAAgB;IAChB,aAAa;IACb,+BAA+B;AACnC;;;AAGA;IACI,6BAA6B;IAC7B,0BAA0B;IAC1B,iBAAiB;IACjB,aAAa;IACb,kBAAkB;IAClB,mBAAmB;IACnB,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,eAAe;IACf,wBAAwB;AAC5B;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,0BAA0B;IAC1B,4CAA4C;IAC5C,cAAc;IACd,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,OAAO;AACX;;AAEA;IACI,cAAc;IACd,iBAAiB;IACjB,iBAAiB;IACjB,0BAA0B;IAC1B,eAAe;IACf,mBAAmB;IACnB,aAAa;IACb,6BAA6B;AACjC;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,yCAAyC;IACzC,4BAA4B;IAC5B,gBAAgB;IAChB,0BAA0B;AAC9B;;AAEA;IACI,0CAA0C;IAC1C,YAAY;IACZ,oBAAoB;IACpB,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,eAAe;IACf,gCAAgC;IAChC,OAAO;IACP,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;;;AAGA;IACI,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,OAAO;IACP,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,0BAA0B;IAC1B,eAAe;IACf,WAAW;AACf;;;;AAIA;IACI,qBAAqB;IACrB,2CAA2C;IAC3C,0BAA0B;IAC1B,oBAAoB;AACxB;;AAEA;;AAEA;;AAEA;IACI,oBAAoB;IACpB,WAAW;IACX,iBAAiB;IACjB,cAAc;IACd,YAAY;IACZ,WAAW;IACX,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;IACd,aAAa;IACb,eAAe;IACf,kBAAkB;IAClB,gBAAgB;IAChB,gBAAgB;IAChB,MAAM;IACN,0CAA0C;AAC9C;;AAEA;IACI,aAAa;IACb,oDAAoD;IACpD,mBAAmB;IACnB,SAAS;IACT,mBAAmB;IACnB,2CAA2C;IAC3C,2CAA2C;IAC3C,cAAc;IACd,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,6BAA6B;AACjC;;;AAGA;IACI,qBAAqB;IACrB,cAAc;AAClB;;AAEA;IACI,wBAAwB;IACxB,cAAc;AAClB;;AAEA;IACI,uBAAuB;IACvB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,+BAA+B;AACnC;;AAEA;;AAEA;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,YAAY;AAChB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,UAAU;IACV,WAAW;IACX,uBAAuB;IACvB,oBAAoB;IACpB,eAAe;IACf,eAAe;AACnB;;;AAGA;IACI,UAAU;IACV,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,wDAAwD;IACxD,mBAAmB;IACnB,SAAS;IACT,mBAAmB;IACnB,2CAA2C;IAC3C,2CAA2C;IAC3C,cAAc;IACd,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,iBAAiB;IACjB,iBAAiB;IACjB,kBAAkB;IAClB,SAAS;IACT,QAAQ;IACR,gCAAgC;IAChC,uBAAuB;IACvB,2CAA2C;IAC3C,0BAA0B;IAC1B,4CAA4C;IAC5C,oDAAoD;IACpD,iDAAiD;IACjD,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,UAAU;AACd;;AAEA;IACI,WAAW;IACX,UAAU;AACd;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,aAAa;IACb,OAAO;IACP,UAAU;AACd;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,UAAU;IACV,YAAY;IACZ,iBAAiB;IACjB,eAAe;IACf,aAAa;IACb,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,OAAO;IACP,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,oFAAoF;IACpF,cAAc;IACd,0BAA0B;AAC9B;;;AAGA;IACI,iCAAiC,EAAE,4CAA4C;IAC/E,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,oFAAoF;IACpF,cAAc;IACd,0BAA0B;AAC9B;;AAEA;IACI,iCAAiC,EAAE,4CAA4C;IAC/E,WAAW;IACX,qBAAqB;AACzB;;AAEA;IACI,cAAc;IACd,eAAe;IACf,gBAAgB;IAChB,iBAAiB;IACjB,eAAe;IACf,0CAA0C;IAC1C,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,2CAA2C;IAC3C,0BAA0B;AAC9B;;AAEA;IACI,cAAc;IACd,gBAAgB;AACpB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Salsa&family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');\n\n:root{\n    --theme-shade-dark-1: #092635;\n    --theme-shade-dark-2: #1B4242;\n    --theme-shade-dark-3: #5C8374;\n    --theme-shade-light: #9EC8B9;\n    --text-color-1: #000000;\n    --text-color-2: #ffffff;\n    --font-family: 'Ubuntu', Arial, Helvetica, sans-serif;\n    --font-logo: 'Salsa', cursive;\n}\n\n*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody, html{\n    width: 100%;\n    height: 100%;\n    font-family: var(--font-family);\n}\n\nbody{\n    background-image: url(\"./bg.jpg\");\n    background-size: cover;\n    background-repeat: no-repeat;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.main-container{\n    background-color: var(--theme-shade-dark-1);\n    width: 80%;\n    height: 80%;\n    max-height: 80%;\n    padding-top: 1%;\n    padding-left: 3%;    \n    display: grid;\n    grid-template: 1fr 8fr/ 1fr 4fr;\n}\n\n\n.logo-container{\n    font-family: var(--font-logo);\n    color: var(--text-color-2);\n    font-size: 2.4rem;\n    display: flex;\n    align-items:center;\n    grid-area: 1/1/1/-1;\n    padding: 1% 0;\n    cursor:default;\n}\n\n.trade-mark{\n    font-size: 1rem;\n    align-self: self-start  ;    \n}\n\n.side-heading{\n    font-size: 1.4rem;\n    font-weight: 700;\n    color: var(--text-color-2);\n    border-bottom: 2px solid var(--text-color-2);\n    cursor:default;\n    margin-right: 10%;\n}\n\n.side-bar{\n    padding: 5% 0 5% 5%;\n    display: flex;\n    flex-direction: column;\n}\n\n#projects{\n    flex: 1;\n}\n\n.side-options{\n    margin-top: 5%;\n    margin-bottom: 5%;\n    font-size: 1.2rem;\n    color: var(--text-color-2);\n    cursor: pointer;\n    padding: 1% 0 1% 5%;\n    display: flex;\n    justify-content:space-between;\n}\n\n.side-options:hover{\n    font-weight: 700;  \n}\n\n.selected{\n    background-color:var(--theme-shade-light);\n    border-radius: 16px 0 0 16px;\n    font-weight: 700;\n    color: var(--text-color-1);\n}\n\n.display-area{\n    background-color: var(--theme-shade-light);\n    height: 100%;\n    grid-area: 2/2/-1/-1;\n    position: relative;\n}\n\n.display-area-no-task{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: start;\n    width: 100%;\n    height: 100%;\n}\n\n.button-area{\n    height: 100%;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n}\n\n.no-task-display{\n    font-size: 2rem;\n    color: var(--theme-shade-dark-2);\n    flex: 1;\n    text-align: center;\n    height: 100%;\n    width: 100%;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n\n.add-icon{\n    width: 40%;\n    cursor: pointer;\n}\n\n.add-button-set{\n    width: 10%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.add-button-container{\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.add-button-set{\n    color: var(--text-color-1);\n    cursor: pointer;\n    padding: 1%;\n}\n\n\n\n.add-button-set:hover{\n    box-sizing:border-box;\n    background-color: var(--theme-shade-dark-1);\n    color: var(--text-color-2);\n    border-radius: 16px ;\n}\n\n.add-button-set:active{\n\n}\n\n.display-area-with-tasks{\n    grid-area: 2 1/-1 -4;\n    padding: 1%;\n    padding-bottom: 0;\n    overflow: auto;    \n    height: 100%;\n    width: 100%;\n    position: absolute;\n    padding-top: 0;\n}\n\n.page-heading{\n    font-size: 2.2rem;\n    font-weight: 700;\n    margin-left: 0;\n    margin-top: 0;\n    padding-top: 1%;\n    padding-bottom: 1%;\n    padding-left: 1%;\n    position: sticky;\n    top: 0;\n    background-color: var(--theme-shade-light);\n}\n\n.task-container-project{\n    display: grid;\n    grid-template-columns: 6fr 2fr 1.5fr 2fr 0.5fr 0.5fr;\n    align-items: center;\n    gap: 1.5%;\n    border-radius: 32px;\n    border: 1px solid var(--theme-shade-dark-2);\n    background-color: var(--theme-shade-dark-2);\n    color: #ffffff;\n    padding: 1% 3%;\n    margin: 1% auto;\n}\n\n.strike-through{\n    text-decoration: line-through;\n}\n\n\n.high{\n    background-color: red;\n    color: #ffffff;\n}\n\n.medium{\n    background-color: yellow;\n    color: #000000;\n}\n\n.low{\n    background-color: green;\n    color: #000000;\n}\n\n.delete{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    cursor: pointer;\n}\n\n.delete-icon{\n    color: var(--theme-shade-light);\n}\n\n.delete:hover{\n\n}\n\n.delete img{\n    width: 100%;\n    height: 100%;\n}\n\n.due-date, .days-left, .priority, .check-box, .delete{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 2rem;\n}\n\n.due-date, .days-left, .priority{\n    cursor: default;\n}\n\n.title{\n    font-weight: 900;\n    font-size: 1.1rem;\n}\n\n.description{\n    font-size: 0.8rem;\n    font-style: italic;\n}\n\n.task-add-container:hover{\n    color: red;\n}\n\n.task-add-container{\n    display: flex;\n    flex-direction: column;\n    width: 15%;\n    height: 10%;\n    justify-content: center;\n    align-items: center ;\n    margin: 2% auto;\n    cursor: pointer;\n}\n\n\n.add-icon-bottom{\n    width:auto;\n    max-height:100%;\n}\n\n.task-container-upcoming{\n    display: grid;\n    grid-template-columns: 2fr 6fr 2fr 1.5fr 2fr 0.5fr 0.5fr;\n    align-items: center;\n    gap: 1.5%;\n    border-radius: 32px;\n    border: 1px solid var(--theme-shade-dark-2);\n    background-color: var(--theme-shade-dark-2);\n    color: #ffffff;\n    padding: 1% 3%;\n    margin: 1% auto;\n}\n\n.task-container-upcoming .due-date, .task-container-upcoming .days-left{\n    font-size: 0.8rem;\n}\n\n.task-container-upcoming .project-name{\n    font-size: 1.4rem;\n    font-weight: 800;\n}\n\n.center {\n    padding: 1%;\n    font-size: 1.2rem;\n    line-height: 3rem;\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    border: 3px solid black;\n    background-color: var(--theme-shade-dark-2);\n    color: var(--text-color-2);\n    box-shadow: 4px 5px 5px 0px rgba(0,0,0,0.75);\n    -webkit-box-shadow: 4px 5px 5px 0px rgba(0,0,0,0.75);\n    -moz-box-shadow: 4px 5px 5px 0px rgba(0,0,0,0.75);\n    border-radius: 8px;\n}\n\n.add-todo-modal{\n    height: 45%;\n    width: 30%;\n}\n\n.add-project-modal{\n    height: 25%;\n    width: 30%;\n}\n\n#todo-entry-modal h2{\n    text-align: center;\n}\n\ninput{\n    width: 100%;\n    font-size: 1.1rem;\n    border-radius: 5px;\n    padding: 1%;\n}\n\n.todo-duedate-section, .todo-priority-section{\n    display: flex;\n    gap: 5%;\n    width: 60%;\n}\n\n.todo-duedate-section label{\n    text-wrap: nowrap;\n}\n\n.todo-description-section{\n    min-height: 40%;\n}\n\nselect, option{\n    font-size: 1.1rem;\n}\n\n.form-section{\n    margin-top: 2%;\n}\n\nform button{\n    width: 20%;\n    height: 100%;\n    font-size: 1.2rem;\n    cursor: pointer;\n    padding: 1% 0;\n    border-radius: 8px;\n    font-size: 900  ;\n}\n\nform .form-buttons-section{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 5%;\n    margin-top: 5%;\n    min-height: 100%;\n}\n\n#delete-button{\n    background-image: linear-gradient(to right, #EB3349 0%, #F45C43  51%, #EB3349  100%);\n    color: #ffffff;\n    background-size: 200% auto;\n}\n\n\n#delete-button:hover {\n    background-position: right center; /* change the direction of the change here */\n    color: #fff;\n    text-decoration: none;\n}\n\n#add-button{\n    background-image: linear-gradient(to right, #ADD100 0%, #7B920A  51%, #ADD100  100%);\n    color: #000000;\n    background-size: 200% auto;     \n}\n\n#add-button:hover {\n    background-position: right center; /* change the direction of the change here */\n    color: #fff;\n    text-decoration: none;\n}\n \n.add-project-button{\n    padding: 2% 2%;\n    font-size: 1rem;\n    font-weight: 600;\n    border-radius:4px;\n    cursor: pointer;\n    background-color: var(--theme-shade-light);\n    margin-top: 4%;\n    margin-left: 5%;\n}\n\n.add-project-button:hover{\n    background-color: var(--theme-shade-dark-2);\n    color: var(--text-color-2);\n}\n\n.side-options img{\n    height: 1.4rem;\n    margin-right: 8%;\n}\n"],sourceRoot:""}]);const A=l},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(i[c]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},667:e=>{e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],d=0;d<e.length;d++){var c=e[d],s=o.base?c[0]+o.base:c[0],l=a[s]||0,u="".concat(s," ").concat(l);a[s]=l+1;var A=n(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)t[A].references++,t[A].updater(h);else{var f=r(h,o);o.byIndex=d,t.splice(d,0,{identifier:u,updater:f,references:1})}i.push(u)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var d=n(a[i]);t[d].references--}for(var c=o(e,r),s=0;s<a.length;s++){var l=n(a[s]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},302:(e,t,n)=>{e.exports=n.p+"81c6b151060c76f8efbc.jpg"}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var o=t.getElementsByTagName("script");if(o.length)for(var r=o.length-1;r>-1&&!e;)e=o[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),a=n(569),i=n.n(a),d=n(565),c=n.n(d),s=n(216),l=n.n(s),u=n(589),A=n.n(u),h=n(426),f={};function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function g(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function p(e){g(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===m(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function C(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function v(e){g(1,arguments);var t=p(e),n=t.getUTCDay(),o=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function b(e){g(1,arguments);var t=p(e),n=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var r=v(o),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=v(a);return t.getTime()>=r.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}f.styleTagTransform=A(),f.setAttributes=c(),f.insert=i().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),t()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var y={};function B(){return y}function w(e,t){var n,o,r,a,i,d,c,s;g(1,arguments);var l=B(),u=C(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.weekStartsOn)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==r?r:l.weekStartsOn)&&void 0!==o?o:null===(c=l.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=p(e),h=A.getUTCDay(),f=(h<u?7:0)+h-u;return A.setUTCDate(A.getUTCDate()-f),A.setUTCHours(0,0,0,0),A}function I(e,t){var n,o,r,a,i,d,c,s;g(1,arguments);var l=p(e),u=l.getUTCFullYear(),A=B(),h=C(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:A.firstWeekContainsDate)&&void 0!==o?o:null===(c=A.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(u+1,0,h),f.setUTCHours(0,0,0,0);var m=w(f,t),v=new Date(0);v.setUTCFullYear(u,0,h),v.setUTCHours(0,0,0,0);var b=w(v,t);return l.getTime()>=m.getTime()?u+1:l.getTime()>=b.getTime()?u:u-1}function x(e,t){for(var n=e<0?"-":"",o=Math.abs(e).toString();o.length<t;)o="0"+o;return n+o}const k=function(e,t){var n=e.getUTCFullYear(),o=n>0?n:1-n;return x("yy"===t?o%100:o,t.length)},E=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):x(n+1,2)},T=function(e,t){return x(e.getUTCDate(),t.length)},S=function(e,t){return x(e.getUTCHours()%12||12,t.length)},D=function(e,t){return x(e.getUTCHours(),t.length)},j=function(e,t){return x(e.getUTCMinutes(),t.length)},M=function(e,t){return x(e.getUTCSeconds(),t.length)},P=function(e,t){var n=t.length,o=e.getUTCMilliseconds();return x(Math.floor(o*Math.pow(10,n-3)),t.length)};var U={G:function(e,t,n){var o=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var o=e.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return k(e,t)},Y:function(e,t,n,o){var r=I(e,o),a=r>0?r:1-r;return"YY"===t?x(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):x(a,t.length)},R:function(e,t){return x(b(e),t.length)},u:function(e,t){return x(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(o);case"QQ":return x(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(e,t,n){var o=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(o);case"qq":return x(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(e,t,n){var o=e.getUTCMonth();switch(t){case"M":case"MM":return E(e,t);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(e,t,n){var o=e.getUTCMonth();switch(t){case"L":return String(o+1);case"LL":return x(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(e,t,n,o){var r=function(e,t){g(1,arguments);var n=p(e),o=w(n,t).getTime()-function(e,t){var n,o,r,a,i,d,c,s;g(1,arguments);var l=B(),u=C(null!==(n=null!==(o=null!==(r=null!==(a=null==t?void 0:t.firstWeekContainsDate)&&void 0!==a?a:null==t||null===(i=t.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==r?r:l.firstWeekContainsDate)&&void 0!==o?o:null===(c=l.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==n?n:1),A=I(e,t),h=new Date(0);return h.setUTCFullYear(A,0,u),h.setUTCHours(0,0,0,0),w(h,t)}(n,t).getTime();return Math.round(o/6048e5)+1}(e,o);return"wo"===t?n.ordinalNumber(r,{unit:"week"}):x(r,t.length)},I:function(e,t,n){var o=function(e){g(1,arguments);var t=p(e),n=v(t).getTime()-function(e){g(1,arguments);var t=b(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),v(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(o,{unit:"week"}):x(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):T(e,t)},D:function(e,t,n){var o=function(e){g(1,arguments);var t=p(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=n-t.getTime();return Math.floor(o/864e5)+1}(e);return"Do"===t?n.ordinalNumber(o,{unit:"dayOfYear"}):x(o,t.length)},E:function(e,t,n){var o=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return x(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,o){var r=e.getUTCDay(),a=(r-o.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return x(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var o=e.getUTCDay(),r=0===o?7:o;switch(t){case"i":return String(r);case"ii":return x(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(e,t,n){var o=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(e,t,n){var o,r=e.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(e,t,n){var o,r=e.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var o=e.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return S(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):D(e,t)},K:function(e,t,n){var o=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(o,{unit:"hour"}):x(o,t.length)},k:function(e,t,n){var o=e.getUTCHours();return 0===o&&(o=24),"ko"===t?n.ordinalNumber(o,{unit:"hour"}):x(o,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):j(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):M(e,t)},S:function(e,t){return P(e,t)},X:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return q(r);case"XXXX":case"XX":return L(r);default:return L(r,":")}},x:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"x":return q(r);case"xxxx":case"xx":return L(r);default:return L(r,":")}},O:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+W(r,":");default:return"GMT"+L(r,":")}},z:function(e,t,n,o){var r=(o._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+W(r,":");default:return"GMT"+L(r,":")}},t:function(e,t,n,o){var r=o._originalDate||e;return x(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,o){return x((o._originalDate||e).getTime(),t.length)}};function W(e,t){var n=e>0?"-":"+",o=Math.abs(e),r=Math.floor(o/60),a=o%60;if(0===a)return n+String(r);var i=t||"";return n+String(r)+i+x(a,2)}function q(e,t){return e%60==0?(e>0?"-":"+")+x(Math.abs(e)/60,2):L(e,t)}function L(e,t){var n=t||"",o=e>0?"-":"+",r=Math.abs(e);return o+x(Math.floor(r/60),2)+n+x(r%60,2)}const N=U;var z=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},Y=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};const O={p:Y,P:function(e,t){var n,o=e.match(/(P+)(p+)?/)||[],r=o[1],a=o[2];if(!a)return z(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",z(r,t)).replace("{{time}}",Y(a,t))}};var F=["D","DD"],H=["YY","YYYY"];function X(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var R={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function G(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const Q={date:G({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:G({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:G({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var _={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function J(e){return function(t,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,a=null!=n&&n.width?String(n.width):r;o=e.formattingValues[a]||e.formattingValues[r]}else{var i=e.defaultWidth,d=null!=n&&n.width?String(n.width):e.defaultWidth;o=e.values[d]||e.values[i]}return o[e.argumentCallback?e.argumentCallback(t):t]}}const V={ordinalNumber:function(e,t){var n=Number(e),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:J({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:J({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:J({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:J({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:J({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Z(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&e.matchPatterns[o]||e.matchPatterns[e.defaultMatchWidth],a=t.match(r);if(!a)return null;var i,d=a[0],c=o&&e.parsePatterns[o]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(c)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(c):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(c);return i=e.valueCallback?e.valueCallback(s):s,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(d.length)}}}var $,K={ordinalNumber:($={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match($.matchPattern);if(!n)return null;var o=n[0],r=e.match($.parsePattern);if(!r)return null;var a=$.valueCallback?$.valueCallback(r[0]):r[0];return{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(o.length)}}),era:Z({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Z({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:Z({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Z({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Z({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const ee={code:"en-US",formatDistance:function(e,t,n){var o,r=R[e];return o="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:Q,formatRelative:function(e,t,n,o){return _[e]},localize:V,match:K,options:{weekStartsOn:0,firstWeekContainsDate:1}};var te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ne=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,oe=/^'([^]*?)'?$/,re=/''/g,ae=/[a-zA-Z]/;function ie(e,t,n){var o,r,a,i,d,c,s,l,u,A,h,f,v,b,y,w,I,x;g(2,arguments);var k=String(t),E=B(),T=null!==(o=null!==(r=null==n?void 0:n.locale)&&void 0!==r?r:E.locale)&&void 0!==o?o:ee,S=C(null!==(a=null!==(i=null!==(d=null!==(c=null==n?void 0:n.firstWeekContainsDate)&&void 0!==c?c:null==n||null===(s=n.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==d?d:E.firstWeekContainsDate)&&void 0!==i?i:null===(u=E.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==a?a:1);if(!(S>=1&&S<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=C(null!==(h=null!==(f=null!==(v=null!==(b=null==n?void 0:n.weekStartsOn)&&void 0!==b?b:null==n||null===(y=n.locale)||void 0===y||null===(w=y.options)||void 0===w?void 0:w.weekStartsOn)&&void 0!==v?v:E.weekStartsOn)&&void 0!==f?f:null===(I=E.locale)||void 0===I||null===(x=I.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==h?h:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!T.localize)throw new RangeError("locale must contain localize property");if(!T.formatLong)throw new RangeError("locale must contain formatLong property");var j=p(e);if(!function(e){if(g(1,arguments),!function(e){return g(1,arguments),e instanceof Date||"object"===m(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=p(e);return!isNaN(Number(t))}(j))throw new RangeError("Invalid time value");var M=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(j),P=function(e,t){return g(2,arguments),function(e,t){g(2,arguments);var n=p(e).getTime(),o=C(t);return new Date(n+o)}(e,-C(t))}(j,M),U={firstWeekContainsDate:S,weekStartsOn:D,locale:T,_originalDate:j};return k.match(ne).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,O[t])(e,T.formatLong):e})).join("").match(te).map((function(o){if("''"===o)return"'";var r,a,i=o[0];if("'"===i)return(a=(r=o).match(oe))?a[1].replace(re,"'"):r;var d,c=N[i];if(c)return null!=n&&n.useAdditionalWeekYearTokens||(d=o,-1===H.indexOf(d))||X(o,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==F.indexOf(e)}(o)||X(o,t,String(e)),c(P,o,T.localize,U);if(i.match(ae))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return o})).join("")}function de(e){g(1,arguments);var t=p(e);return t.setHours(0,0,0,0),t}var ce={ceil:Math.ceil,round:Math.round,floor:Math.floor,trunc:function(e){return e<0?Math.ceil(e):Math.floor(e)}},se="trunc";const le=n.p+"e27b0516349801a5a941.svg",ue=n.p+"0258dbedb58e839573a4.svg",Ae=n.p+"1800a39ac4442fc972cd.svg",he=n.p+"30dcc640c9830de45a37.svg",fe=n.p+"71b7d4006cf22aee54d3.svg",me=n.p+"46f8bda9f110044865d9.svg",ge=function(){const e=[];return{addNewProject:function(t){const n=new pe(t);return e.push(n),n},getProjectsArray:function(){return e},addNewTodo:function(e,t,n,o,r){e.addNewTodo(t,n,o,r)},getTodoList:function(e){return e.getTodoList()},setTodoStatus:function(e,t,n){t.setStatus(n,e)},editProject:function(e,t){t.setNewName(e)},deleteProject:function(t){const n=e.indexOf(t);e.splice(n,1),console.log(e)},addExistingProject:function(t){const n=new pe(t.projectName);e.push(n),t.todos.forEach((e=>{n.addNewTodo(e.title,e.description,e.dueDate,e.priority,e.status)}))},editTodoDetails:function(e,t,n,o,r,a){r.editTodoDetails(e,t,n,o,a)}}}();class pe{constructor(e){this.projectName=e,this.todos=[]}getProjectName(){return this.projectName}addNewTodo(e,t,n,o,r=!1){const a=new Ce(e,t,n,o,r);this.todos.push(a)}getTodoCount(){return this.todos.length}getTodoList(){return this.todos}setStatus(e,t){e.setStatus(t)}setNewName(e){this.projectName=e}editTodoDetails(e,t,n,o,r){r.editTodoDetails(e,t,n,o)}}class Ce{constructor(e,t,n,o,r){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.status=r}getTitle(){return this.title}getDescription(){return this.description}getDueDate(){return this.dueDate}getPriority(){return this.priority}getStatus(){return this.status}setStatus(e){this.status=e}editTodoDetails(e,t,n,o){this.title=e,this.description=t,this.dueDate=n,this.priority=o}}function ve(e,t,n=""){let o=document.createElement(e);return o.classList.add(t),o.textContent=n,o}function be(e,t){let n=document.createElement(e);return n.id=t,n}function ye(e){!function(e){document.querySelectorAll(".side-options").forEach((e=>{e.classList.remove("selected")}));document.querySelector(`#${e}`).classList.add("selected")}(e)}function Be(e="today"){ge.getProjectsArray().forEach,document.querySelector("#today").addEventListener("click",(()=>{ye("today"),Se("Today",0,"today")})),document.querySelector("#week").addEventListener("click",(()=>{ye("week"),Se("Next 7 Days",7,"week")})),document.querySelector("#all").addEventListener("click",(()=>{ye("all"),Se("All",-1,"all")})),function(e="today"){document.querySelectorAll(".side-options-project").forEach((e=>e.remove()));const t=document.querySelector(".add-project-button"),n=ge.getProjectsArray();let o=0;n.forEach((n=>{o++;let r=n.getProjectName(),a=ve("div","side-options");a.classList.add("side-options-project"),a.id=`id${o}`,a.appendChild(ve("div","side-option-name",r));let i=ve("img","delete-side-option");i.src=ue,i.alt="Edit",i.addEventListener("mouseover",(()=>{i.src=Ae})),i.addEventListener("mouseout",(()=>{i.src=ue})),i.addEventListener("click",(()=>{we(3,n);const e=document.querySelector("#dialog-modal");document.querySelector("form input").value=n.getProjectName(),document.querySelector("#delete-button").addEventListener("click",(t=>{t.preventDefault(),function(e){ge.deleteProject(e),Me()}(n),Be(),e.close()})),e.showModal()})),a.appendChild(i);const d=t.parentNode;a.addEventListener("click",(()=>{xe(n),ye(a.id)})),d.insertBefore(a,t),n===e&&a.click()}))}(e);const t=document.querySelectorAll(".side-options"),n=document.querySelector("#dialog-modal");t.forEach((e=>{e.addEventListener("click",(()=>{}))})),document.querySelector(".add-project-button").addEventListener("click",(()=>{we(2),n.showModal()})),"today"===e&&document.querySelector("#today").click()}function we(e,t=""){const n=document.querySelector("#dialog-modal");n.textContent="",n.class="center",n.classList.add("add-project-modal");let o=document.createElement("form");o.id="project-entry-modal";const r=ve("h2","title-add-project");r.textContent="New Project",o.appendChild(r);const a=document.createElement("input");a.type="text",a.placeholder="Enter new project name",o.appendChild(a),o.appendChild(Ie(e)),n.appendChild(o),document.querySelector("#add-button").addEventListener("click",(o=>{o.preventDefault(),2===e?je(a.value):function(e,t){ge.editProject(e,t),Me(),Be(t)}(a.value,t),n.close()}))}function Ie(e){const t=ve("div","form-buttons-section"),n=be("button","submit-button");if(n.textContent="Save",n.id="add-button",t.appendChild(n),3===e){const e=be("button","delete-button");e.textContent="Delete",t.appendChild(e)}const o=document.createElement("button");return o.value="cancel",o.formMethod="dialog",o.textContent="Cancel",t.appendChild(o),t}function xe(e){const t=document.querySelector(".display-area"),n=document.querySelector("#dialog-modal");if(t.textContent="",0===e.getTodoCount()){const o=ve("div","display-area-no-task");o.appendChild(ve("div","page-heading",e.getProjectName()));let r=ve("div","button-area"),a=ve("div","add-button-container"),i=ve("div","add-button-set"),d=ve("img","add-icon");d.src=he,d.alt="+",i.appendChild(d),i.appendChild(ve("div","add-text","Add a task")),i.addEventListener("mouseover",(()=>{d.src=fe})),i.addEventListener("mouseout",(()=>{d.src=he})),i.addEventListener("click",(()=>{Ee(),document.querySelector("dialog #add-button").addEventListener("click",(t=>{t.preventDefault();let o=document.querySelector("#todo-title").value,r=document.querySelector("#todo-description").value,a=document.querySelector("#todo-duedate").value,i=document.querySelector("#todo-priority").value;Pe(e,o,r,a,i),n.close(),xe(e)})),n.showModal()})),a.appendChild(i),r.appendChild(a),o.appendChild(r),t.appendChild(o)}else if(e.getTodoCount()>0){const o=ve("div","display-area-with-tasks");o.appendChild(ve("div","page-heading",e.getProjectName())),Ue(e).forEach((t=>{o.appendChild(ke("project",e,t))}));let r=ve("div","task-add-container"),a=ve("img","add-icon-bottom");a.src=he,a.alt="Add",r.appendChild(a),r.appendChild(ve("div","add-text-bottom","Add a task")),r.addEventListener("click",(()=>{Ee(),document.querySelector("dialog #add-button").addEventListener("click",(t=>{t.preventDefault();let o=document.querySelector("#todo-title").value,r=document.querySelector("#todo-description").value,a=document.querySelector("#todo-duedate").value,i=document.querySelector("#todo-priority").value;Pe(e,o,r,a,i),n.close(),xe(e)})),n.showModal()})),r.addEventListener("mouseover",(()=>{a.src=me})),r.addEventListener("mouseout",(()=>{a.src=he})),o.appendChild(r),t.appendChild(o)}}function ke(e,t,n,o="today"){let r=document.createElement("div"),a=ve("div","project-name",t.getProjectName());"project"===e?r.classList.add("task-container-project"):(r.classList.add("task-container-upcoming"),r.appendChild(a));let i=ve("div","title-container");i.appendChild(ve("div","title",n.getTitle())),i.appendChild(ve("div","description",n.getDescription())),r.appendChild(i),r.appendChild(ve("div","due-date",ie(new Date(n.getDueDate()),"do-MMM-yyyy"))),r.appendChild(ve("div","days-left",`${Te(n.getDueDate(),"text")}`));let d=ve("div","priority",`${n.getPriority()} Priority`);switch(n.getPriority()){case"High":d.classList.add("high");break;case"Medium":d.classList.add("medium");break;case"Low":d.classList.add("low")}r.appendChild(d);let c=ve("input","check-box");if(c.type="checkbox",c.checked=n.getStatus(),!0===n.getStatus()?r.classList.add("strike-through"):r.classList.remove("strike-through"),c.addEventListener("click",(r=>{!function(e,t,n){ge.setTodoStatus(e,t,n),Me()}(r.target.checked,t,n),"project"===e?xe(t):"upcoming"===e&&document.getElementById(o).click()})),r.appendChild(c),"project"===e){let e=ve("div","delete"),o=document.createElement("img");o.src=le,o.addEventListener("mouseover",(()=>{o.src=Ae})),o.addEventListener("mouseout",(()=>{o.src=le})),o.addEventListener("click",(()=>{Ee("edit"),document.querySelector("form h2").textContent="Edit Todo Details",document.querySelector("#todo-title").value=n.getTitle(),document.querySelector("#todo-description").value=n.getDescription(),document.querySelector("#todo-duedate").value=n.getDueDate(),document.querySelector("#todo-priority").value=n.getPriority(),document.querySelector("#add-button").addEventListener("click",(e=>{e.preventDefault(),function(e,t,n,o,r,a){ge.editTodoDetails(e,t,n,o,r,a),Me(),Be(r)}(document.querySelector("#todo-title").value,document.querySelector("#todo-description").value,document.querySelector("#todo-duedate").value,document.querySelector("#todo-priority").value,t,n),document.querySelector("#dialog-modal").close()})),document.querySelector("#dialog-modal").showModal()})),o.alt="Edit",e.appendChild(o),r.appendChild(e)}return r}function Ee(e="add"){const t=document.querySelector("#dialog-modal");t.textContent="",t.className="center",t.classList.add("add-todo-modal");let n=document.createElement("form");n.action="#",n.id="todo-entry-modal";let o=document.createElement("div"),r=document.createElement("h2");r.textContent="Enter Todo Details",o.appendChild(r),n.appendChild(o);let a=document.createElement("div");a.classList.add("todo-title-section","form-section");let i=document.createElement("input");i.type="text",i.id="todo-title",i.name="todo-title",i.placeholder="Todo title",a.appendChild(i),n.appendChild(a);let d=document.createElement("div");d.classList.add("todo-description-section","form-section");let c=document.createElement("input");c.type="text",c.id="todo-description",c.name="todo-description",c.placeholder="Todo description",d.appendChild(c),n.appendChild(d);let s=document.createElement("div");s.classList.add("todo-duedate-section","form-section");let l=document.createElement("label");l.for="todo-duedate",l.textContent="Due date: ",s.appendChild(l);let u=document.createElement("input");u.type="date",u.value=(new Date).toDateInputValue(),u.min=(new Date).toDateInputValue(),u.id="todo-duedate",u.name="todo-duedate",s.appendChild(u),n.appendChild(s);let A=document.createElement("div");A.classList.add("todo-priority-section","form-section");let h=document.createElement("label");h.for="todo-priority",h.textContent="Priority:     ",A.appendChild(h);let f=document.createElement("select");f.name="todo-priority",f.id="todo-priority";let m=document.createElement("option");m.value="High",m.textContent="High",f.appendChild(m);let g=document.createElement("option");g.value="Medium",g.textContent="Medium",f.appendChild(g);let p=document.createElement("option");p.value="Low",p.textContent="Low",f.appendChild(p),A.appendChild(f),n.appendChild(A),"add"===e?n.appendChild(Ie(2)):n.appendChild(Ie(3)),t.appendChild(n)}function Te(e,t="number"){const n=de(Date.now());let o=de(new Date(e));if(console.log(o),console.log(n),function(e,t){g(2,arguments);var n=p(e),o=p(t);return n.getTime()<o.getTime()}(o,n)){if("text"===t)return"Expired";if("number"===t)return-1}const r=function(e,t,n){g(2,arguments);var o,r=function(e,t){return g(2,arguments),p(e).getTime()-p(t).getTime()}(e,t)/1e3;return((o=null==n?void 0:n.roundingMethod)?ce[o]:ce[se])(r)}(o,n),a=Math.floor(r/86400);return"text"===t?`${a} days left`:"number"===t?a:void 0}function Se(e,t,n){const o=document.querySelector(".display-area");let r=ve("div","display-area-no-task");o.textContent="";let a=!0,i=ve("div","display-area-with-tasks");i.appendChild(ve("div","page-heading",e)),r.appendChild(ve("div","page-heading",e)),ge.getProjectsArray().forEach((e=>{Ue(e).forEach((o=>{a=!1;let r=Te(o.getDueDate(),"number");(r<=t&&r>=0&&-1!==t||-1===t)&&i.appendChild(ke("upcoming",e,o,n))}))})),!1===a?o.appendChild(i):(r.appendChild(ve("div","no-task-display","No tasks to show here! ")),o.appendChild(r))}function De(){localStorage.setItem("Tasklet","Initialized")}function je(e){const t=ge.addNewProject(e);Me(),Be(t)}function Me(){var e;e=ge.getProjectsArray(),localStorage.clear(),De(),localStorage.setItem("projects",JSON.stringify(e))}function Pe(e,t,n,o,r){ge.addNewTodo(e,t,n,o,r),Me()}function Ue(e){return Me(),ge.getTodoList(e)}Date.prototype.toDateInputValue=function(){var e=new Date(this);return e.setMinutes(this.getMinutes()-this.getTimezoneOffset()),e.toJSON().slice(0,10)},!0==!!function(e){let t;try{t=window.localStorage;const e="__storage_test__";return t.setItem(e,e),t.removeItem(e),!0}catch(e){return e instanceof DOMException&&(22===e.code||1014===e.code||"QuotaExceededError"===e.name||"NS_ERROR_DOM_QUOTA_REACHED"===e.name)&&t&&0!==t.length}}()?!0==(null===localStorage.getItem("Tasklet"))?(De(),je("General"),Be()):(JSON.parse(localStorage.getItem("projects")).forEach((e=>{ge.addExistingProject(e)})),Be()):alert("Local storage not available. Application will not work .Please check your settings!")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,